import groovy.json.JsonSlurper

buildscript {
	repositories {
		maven {
			name "Fabric Repository"
			url 'https://maven.fabricmc.net'
		}
		mavenLocal()
	}

	dependencies {
		classpath "net.fabricmc:fabric-loader:0.13.0+local"
		classpath "net.fabricmc:mapping-io:0.3.0"
	}
}

plugins {
	id 'maven-publish'
	id "de.undercouch.download" version "4.1.2"
}

static List<String> getPublishedVersions() {
	def xml = new URL("https://maven.fabricmc.net/net/fabricmc/intermediary/maven-metadata.xml").text
	def metadata = new XmlSlurper().parseText(xml)
	def versions = metadata.versioning.versions.version*.text();
	return versions
}

static def getMinecraftVersioMeta() {
	def versions = new URL("https://launchermeta.mojang.com/mc/game/version_manifest_v2.json").text
	def exp_versions = new URL("https://maven.fabricmc.net/net/minecraft/experimental_versions.json").text

	def all_versions = (
		new JsonSlurper().parseText(versions).versions 
		<< new JsonSlurper().parseText(exp_versions).versions
	).flatten()

	return all_versions.collectEntries {
		[it.id, it]
	}
}

task build {}

def publishedVersions = getPublishedVersions()
def mcVersionMetaMap = getMinecraftVersioMeta()

def ENV = System.getenv()

def published = false
def localMappingsPath = "$buildDir/v2Mappings"
def mcJarsDir = "$buildDir/mcJars"
new File(localMappingsPath).mkdirs()
new File(mcJarsDir).mkdirs()

import net.fabricmc.mappingio.MappingReader
import net.fabricmc.mappingio.MappingWriter
import net.fabricmc.mappingio.format.MappingFormat

file('mappings').eachFile {
	if (!it.name.endsWith(".tiny")) return

	def mcVer = it.name.replace(".tiny", "")

	if (!mcVersionMetaMap[mcVer]) {
		throw new RuntimeException("Invalid mc version id ${mcVer}")
	}

	if ((publishedVersions.contains(mcVer) && !(ENV.FORCE_PUBLISH == mcVer)) && !project.hasProperty("buildAll")) {
		project.logger.lifecycle("Skipping ${mcVer} as it has already been released")
		return
	} else {
		project.logger.lifecycle("Building ${mcVer}")
	}

	published = true

	File v1MappingFile = it
	File v2MappingFile = new File("$localMappingsPath/${it.name}")

	def conversionTask = "convert${it.name}ToV2"
	tasks.register(conversionTask) {
		group = "V2 Conversion"
		inputs.file(v1MappingFile)
		outputs.file(v2MappingFile)

		doLast {
			MappingReader.read(
				v1MappingFile.toPath(),
				MappingWriter.create(v2MappingFile.toPath(), MappingFormat.TINY_2)
			)
		}
	}

	def mcJar = new File(mcJarsDir, "${mcVer}.jar")
	def downloadMcJarTask = "download${mcVer}Jar"
	tasks.register(downloadMcJarTask) {
		doLast {
			if (mcJar.exists()) {
				return
			}

			println("Fetching meta for ${mcVer}")

			def versionMeta = mcVersionMetaMap[mcVer].url.toURL().text

			download {
				src new JsonSlurper().parseText(versionMeta).downloads.client.url as String
				dest mcJar
				overwrite false
			}
		}
	}

	Jar makeV1Jar = makeJar(mcVer, v1MappingFile, false, mcJar)
	Jar makeV2Jar = makeJar(mcVer, v2MappingFile, true, mcJar)

	makeV1Jar.dependsOn downloadMcJarTask
	makeV2Jar.dependsOn downloadMcJarTask
	build.dependsOn makeV1Jar
	build.dependsOn makeV2Jar

	makeV2Jar.dependsOn conversionTask

	publishing {
		publications {
			create("${mcVer.replace(" ", "")}_mavenJava", MavenPublication) {
				groupId 'net.fabricmc'
				artifactId "intermediary"
				version mcVer
				artifact(makeV1Jar.archiveFile) {
					builtBy makeV1Jar
				}
				artifact(makeV2Jar.archiveFile) {
					builtBy makeV2Jar
					classifier = "v2"
				}
			}
		}
	}
}

if (!published) {
	throw new RuntimeException("Nothing to publish, override with the FORCE_PUBLISH env")
}

import net.fabricmc.loader.impl.game.minecraft.McVersionLookup

def makeJar(String mcId, File mappings, boolean v2, File mcJar) {
	def jarFilename = "intermediary-" + mcId + (v2 ? "-v2" : "")
	return task("${mcId}_makeJar" + (v2 ? "v2" : ""), type: Jar) {
		baseName jarFilename
		from(file(mappings)) {
			into "mappings"
			rename mappings.name, "mappings.tiny"
		}

		doFirst {
			def mcVersion = McVersionLookup.getVersionExceptClassVersion(mcJar.toPath())

			manifest {
				attributes("Game-Id": "minecraft")
				attributes("Game-Version": mcVersion.normalized)
				attributes("Minecraft-Version-Id": mcId)

				// Null for versions without a versions.json file.
				if (mcVersion.name != null) {
					attributes("Minecraft-Version-Name": mcVersion.name)
				}

				attributes("Build-Time": Instant.now().toString())
			}
		}
		
		destinationDirectory = file("build/jars")
	}
}

publishing {
	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		}
	}
}
